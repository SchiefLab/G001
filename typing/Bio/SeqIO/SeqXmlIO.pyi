"""
This type stub file was generated by pyright.
"""

from xml.sax import handler
from .Interfaces import SequenceIterator, SequenceWriter

"""Bio.SeqIO support for the "seqxml" file format, SeqXML.

This module is for reading and writing SeqXML format files as
SeqRecord objects, and is expected to be used via the Bio.SeqIO API.

SeqXML is a lightweight XML format which is supposed be an alternative for
FASTA files. For more Information see http://www.seqXML.org and Schmitt et al
(2011), https://doi.org/10.1093/bib/bbr025
"""
class ContentHandler(handler.ContentHandler):
    """Handles XML events generated by the parser (PRIVATE)."""
    def __init__(self) -> None:
        """Create a handler to handle XML events."""
        ...
    
    def startDocument(self): # -> None:
        """Set XML handlers when an XML declaration is found."""
        ...
    
    def startSeqXMLElement(self, name, qname, attrs):
        """Handle start of a seqXML element."""
        ...
    
    def endSeqXMLElement(self, name, qname): # -> None:
        """Handle end of the seqXML element."""
        ...
    
    def startEntryElement(self, name, qname, attrs): # -> None:
        """Set new entry with id and the optional entry source (PRIVATE)."""
        ...
    
    def endEntryElement(self, name, qname): # -> None:
        """Handle end of an entry element."""
        ...
    
    def startEntryFieldElement(self, name, qname, attrs): # -> None:
        """Receive a field of an entry element and forward it."""
        ...
    
    def startSpeciesElement(self, attrs): # -> None:
        """Parse the species information."""
        ...
    
    def endSpeciesElement(self, name, qname): # -> None:
        """Handle end of a species element."""
        ...
    
    def startDescriptionElement(self, attrs): # -> None:
        """Parse the description."""
        ...
    
    def endDescriptionElement(self, name, qname): # -> None:
        """Handle the end of a description element."""
        ...
    
    def startSequenceElement(self, attrs): # -> None:
        """Parse DNA, RNA, or protein sequence."""
        ...
    
    def endSequenceElement(self, name, qname): # -> None:
        """Handle the end of a sequence element."""
        ...
    
    def startDBRefElement(self, attrs): # -> None:
        """Parse a database cross reference."""
        ...
    
    def endDBRefElement(self, name, qname): # -> None:
        """Handle the end of a DBRef element."""
        ...
    
    def startPropertyElement(self, attrs): # -> None:
        """Handle the start of a property element."""
        ...
    
    def endPropertyElement(self, name, qname): # -> None:
        """Handle the end of a property element."""
        ...
    
    def characters(self, data): # -> None:
        """Handle character data."""
        ...
    


class SeqXmlIterator(SequenceIterator):
    """Parser for seqXML files.

    Parses seqXML files and creates SeqRecords.
    Assumes valid seqXML please validate beforehand.
    It is assumed that all information for one record can be found within a
    record element or above. Two types of methods are called when the start
    tag of an element is reached. To receive only the attributes of an
    element before its end tag is reached implement _attr_TAGNAME.
    To get an element and its children as a DOM tree implement _elem_TAGNAME.
    Everything that is part of the DOM tree will not trigger any further
    method calls.
    """
    BLOCK = ...
    def __init__(self, stream_or_path, namespace=...) -> None:
        """Create the object and initialize the XML parser."""
        ...
    
    def parse(self, handle): # -> Generator[Unknown, None, None]:
        """Start parsing the file, and return a SeqRecord generator."""
        ...
    
    def iterate(self, handle): # -> Generator[Unknown, None, None]:
        """Iterate over the records in the XML file."""
        ...
    


class SeqXmlWriter(SequenceWriter):
    """Writes SeqRecords into seqXML file.

    SeqXML requires the SeqRecord annotations to specify the molecule_type;
    the molecule type is required to contain the term "DNA", "RNA", or
    "protein".
    """
    def __init__(self, target, source=..., source_version=..., species=..., ncbiTaxId=...) -> None:
        """Create Object and start the xml generator.

        Arguments:
         - target - Output stream opened in binary mode, or a path to a file.
         - source - The source program/database of the file, for example
           UniProt.
         - source_version - The version or release number of the source
           program or database from which the data originated.
         - species - The scientific name of the species of origin of all
           entries in the file.
         - ncbiTaxId - The NCBI taxonomy identifier of the species of origin.

        """
        ...
    
    def write_header(self): # -> None:
        """Write root node with document metadata."""
        ...
    
    def write_record(self, record): # -> None:
        """Write one record."""
        ...
    
    def write_footer(self): # -> None:
        """Close the root node and finish the XML document."""
        ...
    


