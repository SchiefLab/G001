"""
This type stub file was generated by pyright.
"""

from Bio.Seq import SequenceDataAbstractBaseClass
from .Interfaces import SequenceIterator

"""Bio.SeqIO support for UCSC's "twoBit" (.2bit) file format.

This parser reads the index stored in the twoBit file, as well as the masked
regions and the N's for each sequence. It also creates sequence data objects
(_TwoBitSequenceData objects), which support only two methods: __len__ and
__getitem__. The former will return the length of the sequence, while the
latter returns the sequence (as a bytes object) for the requested region.

Using the information in the index, the __getitem__ method calculates the file
position at which the requested region starts, and only reads the requested
sequence region. Note that the full sequence of a record is loaded only if
specifically requested, making the parser memory-efficient.

The TwoBitIterator object implements the __getitem__, keys, and __len__
methods that allow it to be used as a dictionary.
"""
class _TwoBitSequenceData(SequenceDataAbstractBaseClass):
    """Stores information needed to retrieve sequence data from a .2bit file (PRIVATE).

    Objects of this class store the file position at which the sequence data
    start, the sequence length, and the start and end position of unknown (N)
    and masked (lowercase) letters in the sequence.

    Only two methods are provided: __len__ and __getitem__. The former will
    return the length of the sequence, while the latter returns the sequence
    (as a bytes object) for the requested region. The full sequence of a record
    is loaded only if explicitly requested.
    """
    __slots__ = ...
    def __init__(self, stream, offset, length) -> None:
        """Initialize the file stream and file position of the sequence data."""
        ...
    
    def __getitem__(self, key):
        ...
    
    def __len__(self):
        ...
    
    def upper(self): # -> _TwoBitSequenceData:
        """Remove the sequence mask."""
        ...
    
    def lower(self): # -> _TwoBitSequenceData:
        """Extend the sequence mask to the full sequence."""
        ...
    


class TwoBitIterator(SequenceIterator):
    """Parser for UCSC twoBit (.2bit) files."""
    def __init__(self, source) -> None:
        """Read the file index."""
        ...
    
    def parse(self, stream): # -> Generator[SeqRecord, None, None]:
        """Iterate over the sequences in the file."""
        ...
    
    def __getitem__(self, name): # -> SeqRecord:
        ...
    
    def keys(self): # -> dict_keys[Unknown, Unknown]:
        """Return a list with the names of the sequences in the file."""
        ...
    
    def __len__(self): # -> int:
        ...
    


