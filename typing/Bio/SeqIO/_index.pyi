"""
This type stub file was generated by pyright.
"""

from Bio.File import _IndexedSeqFileProxy

"""Dictionary like indexing of sequence files (PRIVATE).

You are not expected to access this module, or any of its code, directly. This
is all handled internally by the Bio.SeqIO.index(...) and index_db(...)
functions which are the public interface for this functionality.

The basic idea is that we scan over a sequence file, looking for new record
markers. We then try to extract the string that Bio.SeqIO.parse/read would
use as the record id, ideally without actually parsing the full record. We
then use a subclassed Python dictionary to record the file offset for the
record start against the record id.

Note that this means full parsing is on demand, so any invalid or problem
record may not trigger an exception until it is accessed. This is by design.

This means our dictionary like objects have in memory ALL the keys (all the
record identifiers), which shouldn't be a problem even with second generation
sequencing. If memory is an issue, the index_db(...) interface stores the
keys and offsets in an SQLite database - which can be re-used to avoid
re-indexing the file for use another time.
"""
class SeqFileRandomAccess(_IndexedSeqFileProxy):
    """Base class for defining random access to sequence files."""
    def __init__(self, filename, format) -> None:
        """Initialize the class."""
        ...
    
    def get(self, offset): # -> SeqRecord:
        """Return SeqRecord."""
        ...
    


class SffRandomAccess(SeqFileRandomAccess):
    """Random access to a Standard Flowgram Format (SFF) file."""
    def __init__(self, filename, format) -> None:
        """Initialize the class."""
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown, Any, Literal[0]] | tuple[Unknown, Any | Unknown, Literal[0]], None, None]:
        """Load any index block in the file, or build it the slow way (PRIVATE)."""
        ...
    
    def get(self, offset):
        """Return the SeqRecord starting at the given offset."""
        ...
    
    def get_raw(self, offset):
        """Return the raw record from the file as a bytes string."""
        ...
    


class SffTrimedRandomAccess(SffRandomAccess):
    """Random access to an SFF file with defined trimming applied to each sequence."""
    def get(self, offset):
        """Return the SeqRecord starting at the given offset."""
        ...
    


class SequentialSeqFileRandomAccess(SeqFileRandomAccess):
    """Random access to a simple sequential sequence file."""
    def __init__(self, filename, format) -> None:
        """Initialize the class."""
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown | str, Unknown | int, int], None, None]:
        """Return (id, offset, length) tuples."""
        ...
    
    def get_raw(self, offset): # -> bytes:
        """Return the raw record from the file as a bytes string."""
        ...
    


class GenBankRandomAccess(SequentialSeqFileRandomAccess):
    """Indexed dictionary like access to a GenBank file."""
    def __iter__(self): # -> Generator[tuple[Unknown | str, Unknown | int, int], None, None]:
        """Iterate over the sequence records in the file."""
        ...
    


class EmblRandomAccess(SequentialSeqFileRandomAccess):
    """Indexed dictionary like access to an EMBL file."""
    def __iter__(self): # -> Generator[tuple[Unknown | str, Unknown | int, int], None, None]:
        """Iterate over the sequence records in the file."""
        ...
    


class SwissRandomAccess(SequentialSeqFileRandomAccess):
    """Random access to a SwissProt file."""
    def __iter__(self): # -> Generator[tuple[Unknown | str, Unknown | int, int], None, None]:
        """Iterate over the sequence records in the file."""
        ...
    


class UniprotRandomAccess(SequentialSeqFileRandomAccess):
    """Random access to a UniProt XML file."""
    def __iter__(self): # -> Generator[tuple[Unknown | str, Unknown | int, Unknown | int], None, None]:
        """Iterate over the sequence records in the file."""
        ...
    
    def get_raw(self, offset): # -> bytes:
        """Return the raw record from the file as a bytes string."""
        ...
    
    def get(self, offset):
        """Return the SeqRecord starting at the given offset."""
        ...
    


class IntelliGeneticsRandomAccess(SeqFileRandomAccess):
    """Random access to a IntelliGenetics file."""
    def __init__(self, filename, format) -> None:
        """Initialize the class."""
        ...
    
    def __iter__(self): # -> Generator[tuple[Unknown | str, int, int], None, None]:
        """Iterate over the sequence records in the file."""
        ...
    
    def get_raw(self, offset): # -> bytes:
        """Return the raw record from the file as a bytes string."""
        ...
    


class TabRandomAccess(SeqFileRandomAccess):
    """Random access to a simple tabbed file."""
    def __iter__(self): # -> Generator[tuple[Unknown | str, Unknown | int, int], None, None]:
        """Iterate over the sequence records in the file."""
        ...
    
    def get_raw(self, offset): # -> bytes | Literal['']:
        """Return the raw record from the file as a bytes string."""
        ...
    


class FastqRandomAccess(SeqFileRandomAccess):
    """Random access to a FASTQ file (any supported variant).

    With FASTQ the records all start with a "@" line, but so can quality lines.
    Note this will cope with line-wrapped FASTQ files.
    """
    def __iter__(self): # -> Generator[tuple[Unknown | str, Unknown | int, int], None, None]:
        """Iterate over the sequence records in the file."""
        ...
    
    def get_raw(self, offset):
        """Return the raw record from the file as a bytes string."""
        ...
    


_FormatToRandomAccess = ...
