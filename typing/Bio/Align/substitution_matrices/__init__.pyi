"""
This type stub file was generated by pyright.
"""

import os
import string
import numpy

"""Substitution matrices."""
class Array(numpy.ndarray):
    """numpy array subclass indexed by integers and by letters."""
    def __new__(cls, alphabet=..., dims=..., data=..., dtype=...):
        """Create a new Array instance."""
        ...
    
    def __array_finalize__(self, obj): # -> None:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __array_prepare__(self, out_arr, context=...):
        ...
    
    def __array_wrap__(self, out_arr, context=...):
        ...
    
    def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):
        ...
    
    def __reduce__(self): # -> tuple[(cls: Type[Array], alphabet: Unknown | None = None, dims: Unknown | None = None, data: Unknown | None = None, dtype: Type[float] = float) -> Unknown, tuple[Type[Array], Any | None, int, None, _DType], bytes]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def transpose(self, axes=...):
        """Transpose the array."""
        ...
    
    @property
    def alphabet(self): # -> Any | None:
        """Return the alphabet property."""
        ...
    
    def copy(self): # -> Array:
        """Create and return a copy of the array."""
        ...
    
    def get(self, key, value=...): # -> None:
        """Return the value of the key if found; return value otherwise."""
        ...
    
    def items(self): # -> Generator[tuple[Unknown, Any] | tuple[tuple[Unknown, Unknown], Any], None, None]:
        """Return an iterator  of (key, value) pairs in the array."""
        ...
    
    def keys(self): # -> tuple[Any] | tuple[tuple[Any, Any], ...]:
        """Return a tuple with the keys associated with the array."""
        ...
    
    def values(self): # -> tuple[Unknown, ...] | tuple[Any, ...]:
        """Return a tuple with the values stored in the array."""
        ...
    
    def update(self, E=..., **F): # -> None:
        """Update the array from dict/iterable E and F."""
        ...
    
    def select(self, alphabet): # -> Array:
        """Subset the array by selecting the letters from the specified alphabet."""
        ...
    
    def __format__(self, fmt): # -> str:
        ...
    
    def format(self, fmt=...): # -> str:
        """Return a string representation of the array.

        The argument ``fmt`` specifies the number format to be used.
        By default, the number format is "%i" if the array contains integer
        numbers, and "%.1f" otherwise.

        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> Any | str:
        ...
    


def read(handle, dtype=...):
    """Parse the file and return an Array object."""
    ...

def load(name=...): # -> list[str]:
    """Load and return a precalculated substitution matrix.

    >>> from Bio.Align import substitution_matrices
    >>> names = substitution_matrices.load()
    """
    ...

