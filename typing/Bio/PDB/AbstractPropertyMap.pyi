"""
This type stub file was generated by pyright.
"""

"""Class that maps (chain_id, residue_id) to a residue property."""
class AbstractPropertyMap:
    """Define base class, map holder of residue properties."""
    def __init__(self, property_dict, property_keys, property_list) -> None:
        """Initialize the class."""
        ...
    
    def __contains__(self, id): # -> bool:
        """Check if the mapping has a property for this residue.

        :param chain_id: chain id
        :type chain_id: char

        :param res_id: residue id
        :type res_id: char

        Examples
        --------
        This is an incomplete but illustrative example::

            if (chain_id, res_id) in apmap:
                res, prop = apmap[(chain_id, res_id)]

        """
        ...
    
    def __getitem__(self, key):
        """Return property for a residue.

        :param chain_id: chain id
        :type chain_id: char

        :param res_id: residue id
        :type res_id: int or (char, int, char)

        :return: some residue property
        :rtype: anything (can be a tuple)
        """
        ...
    
    def __len__(self): # -> int:
        """Return number of residues for which the property is available.

        :return: number of residues
        :rtype: int
        """
        ...
    
    def keys(self):
        """Return the list of residues.

        :return: list of residues for which the property was calculated
        :rtype: [(chain_id, res_id), (chain_id, res_id),...]
        """
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        """Iterate over the (entity, property) list.

        Handy alternative to the dictionary-like access.

        :return: iterator

        Examples
        --------
        >>> entity_property_list = [
        ...     ('entity_1', 'property_1'),
        ...     ('entity_2', 'property_2')
        ... ]
        >>> map = AbstractPropertyMap({}, [], entity_property_list)
        >>> for (res, property) in iter(map):
        ...     print(res, property)
        entity_1 property_1
        entity_2 property_2

        """
        ...
    


class AbstractResiduePropertyMap(AbstractPropertyMap):
    """Define class for residue properties map."""
    def __init__(self, property_dict, property_keys, property_list) -> None:
        """Initialize the class."""
        ...
    


class AbstractAtomPropertyMap(AbstractPropertyMap):
    """Define class for atom properties map."""
    def __init__(self, property_dict, property_keys, property_list) -> None:
        """Initialize the class."""
        ...
    


