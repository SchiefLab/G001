"""
This type stub file was generated by pyright.
"""

"""Classify protein backbone structure with Kolodny et al's fragment libraries.

It can be regarded as a form of objective secondary structure classification.
Only fragments of length 5 or 7 are supported (ie. there is a 'central'
residue).

Full reference:

Kolodny R, Koehl P, Guibas L, Levitt M.
Small libraries of protein fragments model native protein structures accurately.
J Mol Biol. 2002 323(2):297-307.

The definition files of the fragments can be obtained from:

http://github.com/csblab/fragments/

You need these files to use this module.

The following example uses the library with 10 fragments of length 5.
The library files can be found in directory 'fragment_data'.

    >>> from Bio.PDB.PDBParser import PDBParser
    >>> from Bio.PDB.FragmentMapper import FragmentMapper
    >>> parser = PDBParser()
    >>> structure = parser.get_structure("1a8o", "PDB/1A8O.pdb")
    >>> model = structure[0]
    >>> fm = FragmentMapper(model, lsize=10, flength=5, fdir="PDB")
    >>> chain = model['A']
    >>> res152 = chain[152]
    >>> res157 = chain[157]
    >>> res152 in fm # is res152 mapped? (fragment of a C-alpha polypeptide)
    False
    >>> res157 in fm # is res157 mapped? (fragment of a C-alpha polypeptide)
    True

"""
_FRAGMENT_FILE = ...
class Fragment:
    """Represent a polypeptide C-alpha fragment."""
    def __init__(self, length, fid) -> None:
        """Initialize fragment object.

        :param length: length of the fragment
        :type length: int

        :param fid: id for the fragment
        :type fid: int
        """
        ...
    
    def get_resname_list(self): # -> list[Unknown]:
        """Get residue list.

        :return: the residue names
        :rtype: [string, string,...]
        """
        ...
    
    def get_id(self):
        """Get identifier for the fragment.

        :return: id for the fragment
        :rtype: int
        """
        ...
    
    def get_coords(self): # -> ndarray:
        """Get the CA coordinates in the fragment.

        :return: the CA coords in the fragment
        :rtype: Numeric (Nx3) array
        """
        ...
    
    def add_residue(self, resname, ca_coord): # -> None:
        """Add a residue.

        :param resname: residue name (eg. GLY).
        :type resname: string

        :param ca_coord: the c-alpha coorinates of the residues
        :type ca_coord: Numeric array with length 3
        """
        ...
    
    def __len__(self):
        """Return lengt of the fragment."""
        ...
    
    def __sub__(self, other): # -> Any:
        """Return rmsd between two fragments.

        :return: rmsd between fragments
        :rtype: float

        Examples
        --------
        This is an incomplete but illustrative example::

            rmsd = fragment1 - fragment2

        """
        ...
    
    def __repr__(self): # -> str:
        """Represent the fragment object as a string.

        Returns <Fragment length=L id=ID> where L=length of fragment
        and ID the identifier (rank in the library).
        """
        ...
    


class FragmentMapper:
    """Map polypeptides in a model to lists of representative fragments."""
    def __init__(self, model, lsize=..., flength=..., fdir=...) -> None:
        """Create instance of FragmentMapper.

        :param model: the model that will be mapped
        :type model: L{Model}

        :param lsize: number of fragments in the library
        :type lsize: int

        :param flength: length of fragments in the library
        :type flength: int

        :param fdir: directory where the definition files are
                     found (default=".")
        :type fdir: string
        """
        ...
    
    def __contains__(self, res): # -> bool:
        """Check if the given residue is in any of the mapped fragments.

        :type res: L{Residue}
        """
        ...
    
    def __getitem__(self, res):
        """Get an entry.

        :type res: L{Residue}

        :return: fragment classification
        :rtype: L{Fragment}
        """
        ...
    


