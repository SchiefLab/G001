"""
This type stub file was generated by pyright.
"""

from Bio.PDB.Entity import DisorderedEntityWrapper

"""Atom class, used in Structure objects."""
class Atom:
    """Define Atom class.

    The Atom object stores atom name (both with and without spaces),
    coordinates, B factor, occupancy, alternative location specifier
    and (optionally) anisotropic B factor and standard deviations of
    B factor and positions.

    In the case of PQR files, B factor and occupancy are replaced by
    atomic charge and radius.
    """
    def __init__(self, name, coord, bfactor, occupancy, altloc, fullname, serial_number, element=..., pqr_charge=..., radius=...) -> None:
        """Initialize Atom object.

        :param name: atom name (eg. "CA"). Note that spaces are normally stripped.
        :type name: string

        :param coord: atomic coordinates (x,y,z)
        :type coord: Numeric array (Float0, size 3)

        :param bfactor: isotropic B factor
        :type bfactor: number

        :param occupancy: occupancy (0.0-1.0)
        :type occupancy: number

        :param altloc: alternative location specifier for disordered atoms
        :type altloc: string

        :param fullname: full atom name, including spaces, e.g. " CA ". Normally
                         these spaces are stripped from the atom name.
        :type fullname: string

        :param element: atom element, e.g. "C" for Carbon, "HG" for mercury,
        :type element: uppercase string (or None if unknown)

        :param pqr_charge: atom charge
        :type pqr_charge: number

        :param radius: atom radius
        :type radius: number
        """
        ...
    
    def __eq__(self, other) -> bool:
        """Test equality."""
        ...
    
    def __ne__(self, other) -> bool:
        """Test inequality."""
        ...
    
    def __gt__(self, other) -> bool:
        """Test greater than."""
        ...
    
    def __ge__(self, other) -> bool:
        """Test greater or equal."""
        ...
    
    def __lt__(self, other) -> bool:
        """Test less than."""
        ...
    
    def __le__(self, other) -> bool:
        """Test less or equal."""
        ...
    
    def __hash__(self) -> int:
        """Return atom full identifier."""
        ...
    
    def __repr__(self): # -> str:
        """Print Atom object as <Atom atom_name>."""
        ...
    
    def __sub__(self, other): # -> Any:
        """Calculate distance between two atoms.

        :param other: the other atom
        :type other: L{Atom}

        Examples
        --------
        This is an incomplete but illustrative example::

            distance = atom1 - atom2

        """
        ...
    
    def set_serial_number(self, n): # -> None:
        """Set serial number."""
        ...
    
    def set_bfactor(self, bfactor): # -> None:
        """Set isotroptic B factor."""
        ...
    
    def set_coord(self, coord): # -> None:
        """Set coordinates."""
        ...
    
    def set_altloc(self, altloc): # -> None:
        """Set alternative location specifier."""
        ...
    
    def set_occupancy(self, occupancy): # -> None:
        """Set occupancy."""
        ...
    
    def set_sigatm(self, sigatm_array): # -> None:
        """Set standard deviation of atomic parameters.

        The standard deviation of atomic parameters consists
        of 3 positional, 1 B factor and 1 occupancy standard
        deviation.

        :param sigatm_array: standard deviations of atomic parameters.
        :type sigatm_array: Numeric array (length 5)
        """
        ...
    
    def set_siguij(self, siguij_array): # -> None:
        """Set standard deviations of anisotropic temperature factors.

        :param siguij_array: standard deviations of anisotropic temperature factors.
        :type siguij_array: Numeric array (length 6)
        """
        ...
    
    def set_anisou(self, anisou_array): # -> None:
        """Set anisotropic B factor.

        :param anisou_array: anisotropic B factor.
        :type anisou_array: Numeric array (length 6)
        """
        ...
    
    def set_charge(self, pqr_charge): # -> None:
        """Set charge."""
        ...
    
    def set_radius(self, radius): # -> None:
        """Set radius."""
        ...
    
    def flag_disorder(self): # -> None:
        """Set the disordered flag to 1.

        The disordered flag indicates whether the atom is disordered or not.
        """
        ...
    
    def is_disordered(self): # -> int:
        """Return the disordered flag (1 if disordered, 0 otherwise)."""
        ...
    
    def set_parent(self, parent): # -> None:
        """Set the parent residue.

        Arguments:
         - parent - Residue object

        """
        ...
    
    def detach_parent(self): # -> None:
        """Remove reference to parent."""
        ...
    
    def get_sigatm(self): # -> None:
        """Return standard deviation of atomic parameters."""
        ...
    
    def get_siguij(self): # -> None:
        """Return standard deviations of anisotropic temperature factors."""
        ...
    
    def get_anisou(self): # -> None:
        """Return anisotropic B factor."""
        ...
    
    def get_parent(self): # -> None:
        """Return parent residue."""
        ...
    
    def get_serial_number(self): # -> Unknown:
        """Return the serial number."""
        ...
    
    def get_name(self): # -> Unknown:
        """Return atom name."""
        ...
    
    def get_id(self): # -> Unknown:
        """Return the id of the atom (which is its atom name)."""
        ...
    
    def get_full_id(self): # -> tuple[None, None, None, None, Unknown, Unknown]:
        """Return the full id of the atom.

        The full id of an atom is a tuple used to uniquely identify
        the atom and consists of the following elements:
        (structure id, model id, chain id, residue id, atom name, altloc)
        """
        ...
    
    def get_coord(self): # -> Unknown:
        """Return atomic coordinates."""
        ...
    
    def get_bfactor(self): # -> Unknown:
        """Return B factor."""
        ...
    
    def get_occupancy(self): # -> Unknown:
        """Return occupancy."""
        ...
    
    def get_fullname(self): # -> Unknown:
        """Return the atom name, including leading and trailing spaces."""
        ...
    
    def get_altloc(self): # -> Unknown:
        """Return alternative location specifier."""
        ...
    
    def get_level(self): # -> str:
        """Return level."""
        ...
    
    def get_charge(self): # -> Unknown:
        """Return charge."""
        ...
    
    def get_radius(self): # -> Unknown:
        """Return radius."""
        ...
    
    def transform(self, rot, tran): # -> None:
        """Apply rotation and translation to the atomic coordinates.

        :param rot: A right multiplying rotation matrix
        :type rot: 3x3 Numeric array

        :param tran: the translation vector
        :type tran: size 3 Numeric array

        Examples
        --------
        This is an incomplete but illustrative example::

            from numpy import pi, array
            from Bio.PDB.vectors import Vector, rotmat
            rotation = rotmat(pi, Vector(1, 0, 0))
            translation = array((0, 0, 1), 'f')
            atom.transform(rotation, translation)

        """
        ...
    
    def get_vector(self): # -> Vector:
        """Return coordinates as Vector.

        :return: coordinates as 3D vector
        :rtype: Bio.PDB.Vector class
        """
        ...
    
    def copy(self): # -> Self@Atom:
        """Create a copy of the Atom.

        Parent information is lost.
        """
        ...
    


class DisorderedAtom(DisorderedEntityWrapper):
    """Contains all Atom objects that represent the same disordered atom.

    One of these atoms is "selected" and all method calls not caught
    by DisorderedAtom are forwarded to the selected Atom object. In that way, a
    DisorderedAtom behaves exactly like a normal Atom. By default, the selected
    Atom object represents the Atom object with the highest occupancy, but a
    different Atom object can be selected by using the disordered_select(altloc)
    method.
    """
    def __init__(self, id) -> None:
        """Create DisorderedAtom.

        Arguments:
         - id - string, atom name

        """
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        """Iterate through disordered atoms."""
        ...
    
    def __repr__(self): # -> str:
        """Return disordered atom identifier."""
        ...
    
    def center_of_mass(self): # -> Any:
        """Return the center of mass of the DisorderedAtom as a numpy array.

        Assumes all child atoms have the same mass (same element).
        """
        ...
    
    def disordered_get_list(self): # -> list[Unknown]:
        """Return list of atom instances.

        Sorts children by altloc (empty, then alphabetical).
        """
        ...
    
    def disordered_add(self, atom): # -> None:
        """Add a disordered atom."""
        ...
    
    def disordered_remove(self, altloc): # -> None:
        """Remove a child atom altloc from the DisorderedAtom.

        Arguments:
         - altloc - name of the altloc to remove, as a string.

        """
        ...
    
    def transform(self, rot, tran): # -> None:
        """Apply rotation and translation to all children.

        See the documentation of Atom.transform for details.
        """
        ...
    


