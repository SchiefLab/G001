"""
This type stub file was generated by pyright.
"""

from Bio.PDB.Entity import DisorderedEntityWrapper, Entity

"""Residue class, used by Structure objects."""
_atom_name_dict = ...
class Residue(Entity):
    """Represents a residue. A Residue object stores atoms."""
    def __init__(self, id, resname, segid) -> None:
        """Initialize the class."""
        ...
    
    def __repr__(self): # -> str:
        """Return the residue full id."""
        ...
    
    def add(self, atom): # -> None:
        """Add an Atom object.

        Checks for adding duplicate atoms, and raises a
        PDBConstructionException if so.
        """
        ...
    
    def flag_disordered(self): # -> None:
        """Set the disordered flag."""
        ...
    
    def is_disordered(self): # -> int:
        """Return 1 if the residue contains disordered atoms."""
        ...
    
    def get_resname(self): # -> Unknown:
        """Return the residue name."""
        ...
    
    def get_unpacked_list(self): # -> list[Unknown]:
        """Return the list of all atoms, unpack DisorderedAtoms."""
        ...
    
    def get_segid(self): # -> Unknown:
        """Return the segment identifier."""
        ...
    
    def get_atoms(self): # -> Generator[Unknown, None, None]:
        """Return atoms."""
        ...
    


class DisorderedResidue(DisorderedEntityWrapper):
    """DisorderedResidue is a wrapper around two or more Residue objects.

    It is used to represent point mutations (e.g. there is a Ser 60 and a Cys 60
    residue, each with 50 % occupancy).
    """
    def __init__(self, id) -> None:
        """Initialize the class."""
        ...
    
    def __repr__(self): # -> str:
        """Return disordered residue full identifier."""
        ...
    
    def add(self, atom): # -> None:
        """Add atom to residue."""
        ...
    
    def sort(self): # -> None:
        """Sort the atoms in the child Residue objects."""
        ...
    
    def disordered_add(self, residue): # -> None:
        """Add a residue object and use its resname as key.

        Arguments:
         - residue - Residue object

        """
        ...
    
    def disordered_remove(self, resname): # -> None:
        """Remove a child residue from the DisorderedResidue.

        Arguments:
         - resname - name of the child residue to remove, as a string.

        """
        ...
    


