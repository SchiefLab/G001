"""
This type stub file was generated by pyright.
"""

"""Base class for Residue, Chain, Model and Structure classes.

It is a simple container class, with list and dictionary like properties.
"""
class Entity:
    """Basic container object for PDB heirachy.

    Structure, Model, Chain and Residue are subclasses of Entity.
    It deals with storage and lookup.
    """
    def __init__(self, id) -> None:
        """Initialize the class."""
        ...
    
    def __len__(self): # -> int:
        """Return the number of children."""
        ...
    
    def __getitem__(self, id):
        """Return the child with given id."""
        ...
    
    def __delitem__(self, id): # -> None:
        """Remove a child."""
        ...
    
    def __contains__(self, id): # -> bool:
        """Check if there is a child element with the given id."""
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        """Iterate over children."""
        ...
    
    def __eq__(self, other) -> bool:
        """Test for equality. This compares full_id including the IDs of all parents."""
        ...
    
    def __ne__(self, other) -> bool:
        """Test for inequality."""
        ...
    
    def __gt__(self, other) -> bool:
        """Test greater than."""
        ...
    
    def __ge__(self, other) -> bool:
        """Test greater or equal."""
        ...
    
    def __lt__(self, other) -> bool:
        """Test less than."""
        ...
    
    def __le__(self, other) -> bool:
        """Test less or equal."""
        ...
    
    def __hash__(self) -> int:
        """Hash method to allow uniqueness (set)."""
        ...
    
    @property
    def id(self): # -> Unknown:
        """Return identifier."""
        ...
    
    @id.setter
    def id(self, value): # -> None:
        """Change the id of this entity.

        This will update the child_dict of this entity's parent
        and invalidate all cached full ids involving this entity.

        @raises: ValueError
        """
        ...
    
    def get_level(self):
        """Return level in hierarchy.

        A - atom
        R - residue
        C - chain
        M - model
        S - structure
        """
        ...
    
    def set_parent(self, entity): # -> None:
        """Set the parent Entity object."""
        ...
    
    def detach_parent(self): # -> None:
        """Detach the parent."""
        ...
    
    def detach_child(self, id): # -> None:
        """Remove a child."""
        ...
    
    def add(self, entity): # -> None:
        """Add a child to the Entity."""
        ...
    
    def insert(self, pos, entity): # -> None:
        """Add a child to the Entity at a specified position."""
        ...
    
    def get_iterator(self): # -> Generator[Unknown, None, None]:
        """Return iterator over children."""
        ...
    
    def get_list(self): # -> list[Unknown]:
        """Return a copy of the list of children."""
        ...
    
    def has_id(self, id): # -> bool:
        """Check if a child with given id exists."""
        ...
    
    def get_parent(self): # -> None:
        """Return the parent Entity object."""
        ...
    
    def get_id(self): # -> Unknown:
        """Return the id."""
        ...
    
    def get_full_id(self): # -> tuple[Unknown, ...]:
        """Return the full id.

        The full id is a tuple containing all id's starting from
        the top object (Structure) down to the current object. A full id for
        a Residue object e.g. is something like:

        ("1abc", 0, "A", (" ", 10, "A"))

        This corresponds to:

        Structure with id "1abc"
        Model with id 0
        Chain with id "A"
        Residue with id (" ", 10, "A")

        The Residue id indicates that the residue is not a hetero-residue
        (or a water) because it has a blank hetero field, that its sequence
        identifier is 10 and its insertion code "A".
        """
        ...
    
    def transform(self, rot, tran): # -> None:
        """Apply rotation and translation to the atomic coordinates.

        :param rot: A right multiplying rotation matrix
        :type rot: 3x3 Numeric array

        :param tran: the translation vector
        :type tran: size 3 Numeric array

        Examples
        --------
        This is an incomplete but illustrative example::

            from numpy import pi, array
            from Bio.PDB.vectors import Vector, rotmat
            rotation = rotmat(pi, Vector(1, 0, 0))
            translation = array((0, 0, 1), 'f')
            entity.transform(rotation, translation)

        """
        ...
    
    def center_of_mass(self, geometric=...): # -> Any:
        """Return the center of mass of the Entity as a numpy array.

        If geometric is True, returns the center of geometry instead.
        """
        ...
    
    def copy(self): # -> Self@Entity:
        """Copy entity recursively."""
        ...
    


class DisorderedEntityWrapper:
    """Wrapper class to group equivalent Entities.

    This class is a simple wrapper class that groups a number of equivalent
    Entities and forwards all method calls to one of them (the currently selected
    object). DisorderedResidue and DisorderedAtom are subclasses of this class.

    E.g.: A DisorderedAtom object contains a number of Atom objects,
    where each Atom object represents a specific position of a disordered
    atom in the structure.
    """
    def __init__(self, id) -> None:
        """Initialize the class."""
        ...
    
    def __getattr__(self, method): # -> Any:
        """Forward the method call to the selected child."""
        ...
    
    def __getitem__(self, id):
        """Return the child with the given id."""
        ...
    
    def __setitem__(self, id, child): # -> None:
        """Add a child, associated with a certain id."""
        ...
    
    def __contains__(self, id): # -> bool:
        """Check if the child has the given id."""
        ...
    
    def __iter__(self):
        """Return the number of children."""
        ...
    
    def __len__(self): # -> int:
        """Return the number of children."""
        ...
    
    def __sub__(self, other):
        """Subtraction with another object."""
        ...
    
    def __gt__(self, other) -> bool:
        """Return if child is greater than other."""
        ...
    
    def __ge__(self, other) -> bool:
        """Return if child is greater or equal than other."""
        ...
    
    def __lt__(self, other) -> bool:
        """Return if child is less than other."""
        ...
    
    def __le__(self, other) -> bool:
        """Return if child is less or equal than other."""
        ...
    
    def copy(self): # -> Self@DisorderedEntityWrapper:
        """Copy disorderd entity recursively."""
        ...
    
    def get_id(self): # -> Unknown:
        """Return the id."""
        ...
    
    def disordered_has_id(self, id): # -> bool:
        """Check if there is an object present associated with this id."""
        ...
    
    def detach_parent(self): # -> None:
        """Detach the parent."""
        ...
    
    def get_parent(self): # -> None:
        """Return parent."""
        ...
    
    def set_parent(self, parent): # -> None:
        """Set the parent for the object and its children."""
        ...
    
    def disordered_select(self, id): # -> None:
        """Select the object with given id as the currently active object.

        Uncaught method calls are forwarded to the selected child object.
        """
        ...
    
    def disordered_add(self, child):
        """Add disordered entry.

        This is implemented by DisorderedAtom and DisorderedResidue.
        """
        ...
    
    def disordered_remove(self, child):
        """Remove disordered entry.

        This is implemented by DisorderedAtom and DisorderedResidue.
        """
        ...
    
    def is_disordered(self): # -> Literal[2]:
        """Return 2, indicating that this Entity is a collection of Entities."""
        ...
    
    def disordered_get_id_list(self): # -> list[Unknown]:
        """Return a list of id's."""
        ...
    
    def disordered_get(self, id=...): # -> None:
        """Get the child object associated with id.

        If id is None, the currently selected child is returned.
        """
        ...
    
    def disordered_get_list(self): # -> list[Unknown]:
        """Return list of children."""
        ...
    


