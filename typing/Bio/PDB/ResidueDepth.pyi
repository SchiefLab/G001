"""
This type stub file was generated by pyright.
"""

from Bio.PDB.AbstractPropertyMap import AbstractPropertyMap

"""Calculation of residue depth using command line tool MSMS.

This module uses Michel Sanner's MSMS program for the surface calculation.
See: http://mgltools.scripps.edu/packages/MSMS

Residue depth is the average distance of the atoms of a residue from
the solvent accessible surface.

Residue Depth::

    from Bio.PDB.ResidueDepth import ResidueDepth
    from Bio.PDB.PDBParser import PDBParser
    parser = PDBParser()
    structure = parser.get_structure("1a8o", "Tests/PDB/1A8O.pdb")
    model = structure[0]
    rd = ResidueDepth(model)
    print(rd['A',(' ', 152, ' ')])

Direct MSMS interface, typical use::

    from Bio.PDB.ResidueDepth import get_surface
    surface = get_surface(model)

The surface is a Numeric array with all the surface vertices.

Distance to surface::

    from Bio.PDB.ResidueDepth import min_dist
    coord = (1.113, 35.393,  9.268)
    dist = min_dist(coord, surface)

where coord is the coord of an atom within the volume bound by
the surface (ie. atom depth).

To calculate the residue depth (average atom depth of the atoms
in a residue)::

    from Bio.PDB.ResidueDepth import residue_depth
    chain = model['A']
    res152 = chain[152]
    rd = residue_depth(res152, surface)

"""
_atomic_radii = ...
def get_surface(model, MSMS=...): # -> ndarray:
    """Represent molecular surface as a vertex list array.

    Return a Numpy array that represents the vertex list of the
    molecular surface.

    Arguments:
     - MSMS - msms executable (used as argument to subprocess.call)

    """
    ...

def min_dist(coord, surface): # -> Any:
    """Return minimum distance between coord and surface."""
    ...

def residue_depth(residue, surface): # -> Any | float:
    """Residue depth as average depth of all its atoms.

    Return average distance to surface for all atoms in a residue,
    ie. the residue depth.
    """
    ...

def ca_depth(residue, surface): # -> Any | None:
    """Return CA depth."""
    ...

class ResidueDepth(AbstractPropertyMap):
    """Calculate residue and CA depth for all residues."""
    def __init__(self, model, msms_exec=...) -> None:
        """Initialize the class."""
        ...
    


