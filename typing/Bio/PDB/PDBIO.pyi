"""
This type stub file was generated by pyright.
"""

"""Output of PDB files."""
_ATOM_FORMAT_STRING = ...
_PQR_ATOM_FORMAT_STRING = ...
class Select:
    """Select everything for PDB output (for use as a base class).

    Default selection (everything) during writing - can be used as base class
    to implement selective output. This selects which entities will be written out.
    """
    def __repr__(self): # -> Literal['<Select all>']:
        """Represent the output as a string for debugging."""
        ...
    
    def accept_model(self, model): # -> Literal[1]:
        """Overload this to reject models for output."""
        ...
    
    def accept_chain(self, chain): # -> Literal[1]:
        """Overload this to reject chains for output."""
        ...
    
    def accept_residue(self, residue): # -> Literal[1]:
        """Overload this to reject residues for output."""
        ...
    
    def accept_atom(self, atom): # -> Literal[1]:
        """Overload this to reject atoms for output."""
        ...
    


_select = ...
class StructureIO:
    """Base class to derive structure file format writers from."""
    def __init__(self) -> None:
        """Initialise."""
        ...
    
    def set_structure(self, pdb_object):
        """Check what the user is providing and build a structure."""
        ...
    


class PDBIO(StructureIO):
    """Write a Structure object (or a subset of a Structure object) as a PDB or PQR file.

    Examples
    --------
    >>> from Bio.PDB import PDBParser
    >>> from Bio.PDB.PDBIO import PDBIO
    >>> parser = PDBParser()
    >>> structure = parser.get_structure("1a8o", "PDB/1A8O.pdb")
    >>> io=PDBIO()
    >>> io.set_structure(structure)
    >>> io.save("bio-pdb-pdbio-out.pdb")
    >>> import os
    >>> os.remove("bio-pdb-pdbio-out.pdb")  # tidy up


    """
    def __init__(self, use_model_flag=..., is_pqr=...) -> None:
        """Create the PDBIO object.

        :param use_model_flag: if 1, force use of the MODEL record in output.
        :type use_model_flag: int
        :param is_pqr: if True, build PQR file. Otherwise build PDB file.
        :type is_pqr: Boolean
        """
        ...
    
    def save(self, file, select=..., write_end=..., preserve_atom_numbering=...):
        """Save structure to a file.

        :param file: output file
        :type file: string or filehandle

        :param select: selects which entities will be written.
        :type select: object

        Typically select is a subclass of L{Select}, it should
        have the following methods:

         - accept_model(model)
         - accept_chain(chain)
         - accept_residue(residue)
         - accept_atom(atom)

        These methods should return 1 if the entity is to be
        written out, 0 otherwise.

        Typically select is a subclass of L{Select}.
        """
        ...
    


