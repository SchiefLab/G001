"""
This type stub file was generated by pyright.
"""

"""Linked list functionality for use in Bio.Nexus.

Provides functionality of a linked list.
Each node has one (or none) predecessor, and an arbitrary number of successors.
Nodes can store arbitrary data in a NodeData class.

Subclassed by Nexus.Trees to store phylogenetic trees.

Bug reports to Frank Kauff (fkauff@biologie.uni-kl.de)
"""
class ChainException(Exception):
    """Provision for the management of Chain exceptions."""
    ...


class NodeException(Exception):
    """Provision for the management of Node exceptions."""
    ...


class Chain:
    """Stores a list of nodes that are linked together."""
    def __init__(self) -> None:
        """Initialize a node chain."""
        ...
    
    def all_ids(self): # -> list[Unknown]:
        """Return a list of all node ids."""
        ...
    
    def add(self, node, prev=...): # -> int:
        """Attach node to another."""
        ...
    
    def collapse(self, id):
        """Delete node from chain and relinks successors to predecessor."""
        ...
    
    def kill(self, id): # -> None:
        """Kill a node from chain without caring to what it is connected."""
        ...
    
    def unlink(self, id):
        """Disconnect node from his predecessor."""
        ...
    
    def link(self, parent, child): # -> None:
        """Connect son to parent."""
        ...
    
    def is_parent_of(self, parent, grandchild): # -> bool:
        """Check if grandchild is a subnode of parent."""
        ...
    
    def trace(self, start, finish): # -> list[Unknown] | None:
        """Return a list of all node_ids between two nodes (excluding start, including end)."""
        ...
    


class Node:
    """A single node."""
    def __init__(self, data=...) -> None:
        """Represent a node with one predecessor and multiple successors."""
        ...
    
    def set_id(self, id): # -> None:
        """Set the id of a node, if not set yet."""
        ...
    
    def get_id(self): # -> None:
        """Return the node's id."""
        ...
    
    def get_succ(self): # -> list[Unknown]:
        """Return a list of the node's successors."""
        ...
    
    def get_prev(self): # -> None:
        """Return the id of the node's predecessor."""
        ...
    
    def add_succ(self, id): # -> None:
        """Add a node id to the node's successors."""
        ...
    
    def remove_succ(self, id): # -> None:
        """Remove a node id from the node's successors."""
        ...
    
    def set_succ(self, new_succ): # -> None:
        """Set the node's successors."""
        ...
    
    def set_prev(self, id): # -> None:
        """Set the node's predecessor."""
        ...
    
    def get_data(self): # -> Unknown:
        """Return a node's data."""
        ...
    
    def set_data(self, data): # -> None:
        """Set a node's data."""
        ...
    


