"""
This type stub file was generated by pyright.
"""

import multiprocessing
from pathlib import Path
from typing import Any, Callable, Dict, Iterator, Optional, Type
from .data_types import DataType
from .progress_bars import ProgressBarsType

ON_WINDOWS = ...
CONTEXT = ...
MEMORY_FS_ROOT = ...
NB_PHYSICAL_CORES = ...
PREFIX = ...
PREFIX_INPUT = ...
PREFIX_OUTPUT = ...
SUFFIX = ...
class WrapWorkFunctionForFileSystem:
    def __init__(self, work_function: Callable[[Any, Callable, tuple, Dict[str, Any], Dict[str, Any]], Any]) -> None:
        ...
    
    def __call__(self, input_file_path: Path, output_file_path: Path, progress_bars_type: ProgressBarsType, worker_index: int, master_workers_queue: multiprocessing.Queue, dilled_user_defined_function: bytes, user_defined_function_args: tuple, user_defined_function_kwargs: Dict[str, Any], extra: Dict[str, Any]) -> None:
        ...
    


class WrapWorkFunctionForPipe:
    def __init__(self, work_function: Callable[[Any, Callable, tuple, Dict[str, Any], Dict[str, Any]], Any,]) -> None:
        ...
    
    def __call__(self, data: Any, progress_bars_type: ProgressBarsType, worker_index: int, master_workers_queue: multiprocessing.Queue, dilled_user_defined_function: bytes, user_defined_function_args: tuple, user_defined_function_kwargs: Dict[str, Any], extra: Dict[str, Any]) -> Any:
        ...
    


def wrap_reduce_function_for_file_system(reduce_function: Callable[[Iterator, Dict[str, Any]], Any]) -> Callable[[Iterator[Path], Dict[str, Any]], Any]:
    """This wrapper transforms a `reduce` function which takes as input:
    - A list of pandas Dataframe
    - An user defined function
    and which returns a pandas Dataframe, into a `reduct` function which takes as input:
    - A list of paths where  pandas Dataframe are pickled
    which returns a pandas Dataframe.
    """
    ...

def parallelize_with_memory_file_system(nb_requested_workers: int, data_type: Type[DataType], progress_bars_type: ProgressBarsType): # -> (data: Any, user_defined_function: (...) -> Unknown, *user_defined_function_args: tuple[Unknown, ...], **user_defined_function_kwargs: Dict[str, Any]) -> Any:
    ...

def parallelize_with_pipe(nb_requested_workers: int, data_type: Type[DataType], progress_bars_type: ProgressBarsType): # -> (data: Any, user_defined_function: (...) -> Unknown, *user_defined_function_args: tuple[Unknown, ...], **user_defined_function_kwargs: Dict[str, Any]) -> Any:
    ...

class pandarallel:
    @classmethod
    def initialize(cls, shm_size_mb=..., nb_workers=..., progress_bar=..., verbose=..., use_memory_fs: Optional[bool] = ...) -> None:
        ...
    


