"""
This type stub file was generated by pyright.
"""

import multiprocessing
from abc import ABC, abstractmethod
from enum import Enum
from typing import Callable, List, Union

MINIMUM_TERMINAL_WIDTH = ...
class ProgressBarsType(int, Enum):
    No = ...
    InUserDefinedFunction = ...
    InUserDefinedFunctionMultiplyByNumberOfColumns = ...
    InWorkFunction = ...


class ProgressBars(ABC):
    @abstractmethod
    def __init__(self, maxs: List[int], show: bool) -> None:
        ...
    
    @abstractmethod
    def update(self, values: List[int]) -> None:
        ...
    
    def set_error(self, index: int) -> None:
        ...
    


class ProgressState:
    def __init__(self, chunk_size: int) -> None:
        ...
    


def is_notebook_lab() -> bool:
    ...

class ProgressBarsConsole(ProgressBars):
    def __init__(self, maxs: List[int], show: bool) -> None:
        ...
    
    def update(self, values: List[int]) -> None:
        """Update a bar value.
        Positional arguments:
        values - The new values of each bar
        """
        ...
    


class ProgressBarsNotebookLab(ProgressBars):
    def __init__(self, maxs: List[int], show: bool) -> None:
        """Initialization.
        Positional argument:
        maxs - List containing the max value of each progress bar
        """
        ...
    
    def update(self, values: List[int]) -> None:
        """Update a bar value.
        Positional arguments:
        values - The new values of each bar
        """
        ...
    
    def set_error(self, index: int) -> None:
        """Set a bar on error"""
        ...
    


def get_progress_bars(maxs: List[int], show) -> Union[ProgressBarsNotebookLab, ProgressBarsConsole]:
    ...

def progress_wrapper(user_defined_function: Callable, master_workers_queue: multiprocessing.Queue, index: int, chunk_size: int) -> Callable:
    """Wrap the function to apply in a function which monitor the part of work already
    done.
    """
    ...

